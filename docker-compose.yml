version: '3.7'

x-shared_environment: &shared_environment
  LOG_LEVEL: ${LOG_LEVEL}
  DATABASE_HOST: ${DATABASE_HOST:-db}
  DATABASE_NAME: ${DATABASE_NAME:-vapor_database}
  DATABASE_USERNAME: ${DATABASE_USERNAME:-vapor_username}
  DATABASE_PASSWORD: ${DATABASE_PASSWORD:-vapor_password}

services:
  {{name}}:
    image: {{name}}:latest
    build:
      context: .
    environment:
      <<: *shared_environment
    {{#fluent}}depends_on:
      - db{{/fluent}}
    ports:
      - '8080:80'

  {{#fluent}}migrator:
    image: {{name}}:latest
    build:
      context: .
    environment:
      <<: *shared_environment
    depends_on:
      - db
    command:
      - 'migrate'
      - '--yes'
    deploy:
      replicas: 0 # use `docker service scale --detach migrator=1` to spin up.{{/fluent}}
      restart_policy:
        condition: none

  {{#fluent.db.is_postgres}}db:
    image: postgres:12.1-alpine
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME:-vapor_username}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-vapor_password}
      POSTGRES_DB: ${DATABASE_NAME:-vapor_database}
    ports:
      - '5432:5432'{{/fluent.db.is_postgres}}{{#fluent.db.is_mysql}}
  db:
    image: mysql:8.0
    environment:
      MYSQL_USER: ${DATABASE_USERNAME:-vapor_username}
      MYSQL_PASSWORD: ${DATABASE_PASSWORD:-vapor_password}
      MYSQL_DATABASE: ${DATABASE_NAME:-vapor_database}
      MYSQL_RANDOM_ROOT_PASSWORD: 'yes'
    ports:
      - '3306:3306'{{/fluent.db.is_mysql}}

##
## Building
##
## - `docker-compose build`
##
## https://docs.docker.com/compose/reference/build/

##
## Running Containers
##
## - `docker-compose up` to run all services.
## - `docker-compose up <service-name>[,...]` to run one or more services by name.
##
## https://docs.docker.com/compose/reference/up/

##
## Running Services in Swarm (local or remote)
##
## - `docker swarm init` (run once)
## - `docker stack deploy -c docker-compose.yml <stack-name>` to deploy a stack with whatever name you want.
## - `docker service ls` to see running services.
## - `docker service logs -f <service-name>` to tail logs for a service.
## - `docker stack rm <stack-name>` to bring the stack down.
##
## https://docs.docker.com/engine/swarm/stack-deploy/

##
## Setting Environment Vars
##
## The commands above take certain environment vars from
## the calling scope (or use defaults otherwise). You set them
## manually by
## 1. exporting them from the active shell: `export DATABASE_USERNAME=...`
## 2. setting them inline with a command: `DATABASE_USERNAME=... docker-compose up db`
